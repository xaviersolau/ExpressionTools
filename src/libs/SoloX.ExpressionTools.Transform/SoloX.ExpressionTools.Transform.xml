<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SoloX.ExpressionTools.Transform</name>
    </assembly>
    <members>
        <member name="T:SoloX.ExpressionTools.Transform.IExpressionInliner">
            <summary>
            Interface of the parameter in-liner. Used to replace expression parameter by other expression.
            </summary>
        </member>
        <member name="M:SoloX.ExpressionTools.Transform.IExpressionInliner.Amend``2(System.Linq.Expressions.Expression{``0})">
            <summary>
            Replace parameters in the given expression in-lining associated expressions.
            </summary>
            <typeparam name="TInputDelegate">Delegate type of the lambda expression used as input.</typeparam>
            <typeparam name="TOutputDelegate">Delegate type of the resulting lambda expression.</typeparam>
            <param name="expression">The expression in witch parameters must be replaced.</param>
            <returns>The resulting amended lambda expression.</returns>
        </member>
        <member name="M:SoloX.ExpressionTools.Transform.IExpressionInliner.Amend(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Replace parameters in the given expression in-lining associated expressions.
            </summary>
            <param name="expression">The expression in witch parameters must be replaced.</param>
            <returns>The resulting amended abstract lambda expression.</returns>
        </member>
        <member name="T:SoloX.ExpressionTools.Transform.Impl.ExpressionInliner">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Transform.Impl.ExpressionInliner.#ctor(SoloX.ExpressionTools.Transform.IParameterResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:SoloX.ExpressionTools.Transform.Impl.ExpressionInliner"/> class with a given parameter resolver.
            </summary>
            <param name="parameterResolver">The parameter resolver that provides the expression to in-line replacing a given parameter.</param>
        </member>
        <member name="M:SoloX.ExpressionTools.Transform.Impl.ExpressionInliner.Amend``2(System.Linq.Expressions.Expression{``0})">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Transform.Impl.ExpressionInliner.Amend(System.Linq.Expressions.LambdaExpression)">
            <inheritdoc />
        </member>
        <member name="T:SoloX.ExpressionTools.Transform.Impl.Resolver.ParameterResolver">
            <summary>
            IParameterResolver implementation that resolve a parameter expression with an expression to in-line.
            </summary>
        </member>
        <member name="M:SoloX.ExpressionTools.Transform.Impl.Resolver.ParameterResolver.Register``1(System.String,System.Linq.Expressions.Expression{``0})">
            <summary>
            Register an expression to be in-line and substitute a parameter matching the given name.
            </summary>
            <typeparam name="TDelegate">Delegate type of the lambda expression.</typeparam>
            <param name="parameterName">The parameter name that will be replaced by the given lambda expression.</param>
            <param name="expression">The expression to in-line.</param>
            <returns>The current resolver.</returns>
        </member>
        <member name="M:SoloX.ExpressionTools.Transform.Impl.Resolver.ParameterResolver.Resolve(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc />
        </member>
        <member name="T:SoloX.ExpressionTools.Transform.Impl.Visitor.InlinerVisitor">
            <summary>
            InlinerVisitor class that will actually in-line expression and replace parameter use.
            </summary>
        </member>
        <member name="M:SoloX.ExpressionTools.Transform.Impl.Visitor.InlinerVisitor.#ctor(SoloX.ExpressionTools.Transform.IParameterResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:SoloX.ExpressionTools.Transform.Impl.Visitor.InlinerVisitor"/> class.
            </summary>
            <param name="parameterResolver">The resolver that will provide the expression to in-line depending on the parameters.</param>
        </member>
        <member name="M:SoloX.ExpressionTools.Transform.Impl.Visitor.InlinerVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Transform.Impl.Visitor.InlinerVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Transform.Impl.Visitor.InlinerVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc />
        </member>
        <member name="T:SoloX.ExpressionTools.Transform.IParameterResolver">
            <summary>
            Interface used by the IExpressionInliner in order to resolve expression to in-line for a given parameter.
            </summary>
        </member>
        <member name="M:SoloX.ExpressionTools.Transform.IParameterResolver.Resolve(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Resolve the expression to in-line for the given parameter.
            </summary>
            <param name="parameter">The parameter to resolve.</param>
            <returns>The expression to in-line or null if the parameter must not be replaced.</returns>
        </member>
    </members>
</doc>
