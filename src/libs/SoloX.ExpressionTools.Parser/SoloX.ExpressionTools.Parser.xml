<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SoloX.ExpressionTools.Parser</name>
    </assembly>
    <members>
        <member name="T:SoloX.ExpressionTools.Parser.IExpressionParser">
            <summary>
            Interface of the expression parser. Used to parse a C# lambda expression and to generate
            a System.Linq.Expressions tree.
            </summary>
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.IExpressionParser.Parse``1(System.String)">
            <summary>
            Parse a textual C# lambda expression.
            </summary>
            <typeparam name="TDelegate">The expected resulting delegate.</typeparam>
            <param name="lambdaExpressionText">The lambda expression text input.</param>
            <returns>A typed lambda expression.</returns>
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.IExpressionParser.Parse(System.String)">
            <summary>
            Parse a textual C# lambda expression.
            </summary>
            <param name="lambdaExpressionText">The lambda expression text input.</param>
            <returns>An abstract lambda expression.</returns>
        </member>
        <member name="T:SoloX.ExpressionTools.Parser.IMethodResolver">
            <summary>
            Interface used by the ExpressionParser in order to resolve method invocation expression.
            </summary>
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.IMethodResolver.ResolveMethod(System.String,System.Type[])">
            <summary>
            Provide a MethodInfo matching the given name and the given parameter types.
            </summary>
            <param name="methodName">The method name.</param>
            <param name="argsType">The method argument types.</param>
            <returns>The MethodInfo.</returns>
        </member>
        <member name="T:SoloX.ExpressionTools.Parser.Impl.ExpressionParser">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.ExpressionParser.#ctor(SoloX.ExpressionTools.Parser.IParameterTypeResolver,SoloX.ExpressionTools.Parser.IMethodResolver,SoloX.ExpressionTools.Parser.ITypeNameResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:SoloX.ExpressionTools.Parser.Impl.ExpressionParser"/> class with a parameter
            type resolver and a method resolver.
            </summary>
            <param name="parameterTypeResolver">Resolver that will be used to associate a Type to a given parameter name.</param>
            <param name="methodResolver">Resolver that will be used to identify a method given a name and an argument type list.</param>
            <param name="typeNameResolver">Resolver that will be used to identify a type given a name.</param>
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.ExpressionParser.Parse``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.ExpressionParser.Parse(System.String)">
            <inheritdoc />
        </member>
        <member name="T:SoloX.ExpressionTools.Parser.Impl.Resolver.DictionaryParameterTypeResolver">
            <summary>
            IParameterTypeResolver implementation using a Dictionary as input to resolve a parameter type
            given a parameter name.
            </summary>
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Resolver.DictionaryParameterTypeResolver.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:SoloX.ExpressionTools.Parser.Impl.Resolver.DictionaryParameterTypeResolver"/> class.
            </summary>
            <param name="typeMap">The parameter type map.</param>
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Resolver.DictionaryParameterTypeResolver.ResolveType(System.String)">
            <inheritdoc />
        </member>
        <member name="T:SoloX.ExpressionTools.Parser.Impl.Resolver.StaticMethodResolver">
            <summary>
            IMethodResolver implementation that match methods in a given type definition.
            </summary>
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Resolver.StaticMethodResolver.#ctor(System.Boolean,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:SoloX.ExpressionTools.Parser.Impl.Resolver.StaticMethodResolver"/> class.
            </summary>
            <param name="ignoreCase">Tells if the resolver must ignore the method name case.</param>
            <param name="types">Type list used to search and resolve method name.</param>
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Resolver.StaticMethodResolver.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:SoloX.ExpressionTools.Parser.Impl.Resolver.StaticMethodResolver"/> class.
            </summary>
            <param name="types">Type list used to search and resolve method name.</param>
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Resolver.StaticMethodResolver.ResolveMethod(System.String,System.Type[])">
            <inheritdoc />
        </member>
        <member name="T:SoloX.ExpressionTools.Parser.Impl.Resolver.TypeNameResolver">
            <summary>
            ITypeNameResolver implementation that resolve a type name given a type list.
            </summary>
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Resolver.TypeNameResolver.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:SoloX.ExpressionTools.Parser.Impl.Resolver.TypeNameResolver"/> class.
            </summary>
            <param name="types">The type list to match in the type name resolution.</param>
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Resolver.TypeNameResolver.ResolveTypeName(System.String)">
            <inheritdoc />
        </member>
        <member name="T:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor">
            <summary>
            Visitor to convert Lambda CSharp syntax tree to Linq Expression.
            </summary>
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.#ctor(SoloX.ExpressionTools.Parser.IParameterTypeResolver,SoloX.ExpressionTools.Parser.IMethodResolver,SoloX.ExpressionTools.Parser.ITypeNameResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor"/> class.
            </summary>
            <param name="parameterTypeResolver">Resolver that will identify the parameters type.</param>
            <param name="methodResolver">Resolver that will identify methods.</param>
            <param name="typeNameResolver">Resolver that will identify types.</param>
        </member>
        <member name="P:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.ParameterTypeResolver">
            <summary>
            Gets the parameter type resolver.
            </summary>
        </member>
        <member name="P:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.MethodResolver">
            <summary>
            Gets the method resolver.
            </summary>
        </member>
        <member name="P:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.TypeNameResolver">
            <summary>
            Gets the type name resolver.
            </summary>
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.VisitParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax)">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.VisitSimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax)">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.VisitParameter(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax)">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.VisitParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.VisitInvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax)">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.VisitArgument(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax)">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.VisitMemberAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax)">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.VisitIdentifierName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.VisitParenthesizedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax)">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.VisitElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax)">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.VisitBinaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax)">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.VisitPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax)">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.VisitLiteralExpression(Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax)">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitor.VisitConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax)">
            <inheritdoc />
        </member>
        <member name="T:SoloX.ExpressionTools.Parser.Impl.Visitor.LambdaVisitorAttribute">
            <summary>
            LambdaVisitor attribute.
            </summary>
        </member>
        <member name="T:SoloX.ExpressionTools.Parser.Impl.Visitor.TypeVisitor">
            <summary>
            TypeVisitor class that will actually identify Type.
            </summary>
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Visitor.TypeVisitor.VisitPredefinedType(Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax)">
            <inheritdoc />
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.Impl.Visitor.TypeVisitor.VisitArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax)">
            <inheritdoc />
        </member>
        <member name="T:SoloX.ExpressionTools.Parser.IParameterTypeResolver">
            <summary>
            interface used by the expression parser to resolve parameter type.
            </summary>
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.IParameterTypeResolver.ResolveType(System.String)">
            <summary>
            Provide the Type associated to the parameter matching the given name.
            </summary>
            <param name="parameterName">The parameter name.</param>
            <returns>The Type of the parameter.</returns>
        </member>
        <member name="T:SoloX.ExpressionTools.Parser.ITypeNameResolver">
            <summary>
            Interface used by the ExpressionParser in order to resolve type name.
            </summary>
        </member>
        <member name="M:SoloX.ExpressionTools.Parser.ITypeNameResolver.ResolveTypeName(System.String)">
            <summary>
            Provide a Type from the given type name.
            </summary>
            <param name="typeName">The type name to match.</param>
            <returns>The resolved type matching the given name or null otherwise.</returns>
        </member>
    </members>
</doc>
